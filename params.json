{"name":"AP-Test-Questions","tagline":"AP Test Questions #2, 3, 4","body":"Nihar Mitra  \r\nAP CS  \r\nKuszmaul 6  \r\nFebruary 19, 2015  \r\nAP Test Questions #2,3,4\r\n======\r\n## Question 1  \r\n### Original:  \r\nConsider the following two classes.  \r\n```Java\r\npublic class Dog {\r\n\tpublic void act() {\r\n\t\tSystem.out.print(\"run \");\r\n\t\teat();\r\n\t}\r\n\tpublic void eat() { \r\n\t\tSystem.out.print(\"eat \"); \r\n\t}\r\n}\r\npublic class UnderDog extends Dog {\r\n\tpublic void act() { \r\n\t\tsuper.act();\r\n\t\tSystem.out.print(\"sleep \");\r\n\t}\r\n\tpublic void eat() { \r\n\t\tsuper.eat(); \r\n\t\tSystem.out.print(\"bark \"); \r\n\t} \r\n}\r\n```\r\nAssume that the following declaration appears in a class other than Dog.  \r\n```Java\r\nDog fido = new UnderDog();\r\n```  \r\nWhat is printed as a result of the call fido.act()?  \r\n(a) run eat  \r\n(b) run eat sleep  \r\n(c) run eat sleep bark  \r\n(d) run eat bark sleep  \r\n(e) Nothing is printed due to infinite recursion.  \r\nCorrect answer b).\r\n\r\n### New version\r\nConsider the following two classes.  \r\n```Java\r\npublic class Dog {\r\n\tpublic void act() {\r\n\t\tSystem.out.print(\"run \");\r\n\t\teat();\r\n\t}\r\n\tpublic void eat() {\r\n\t\tact();\r\n\t\tSystem.out.print(\"eat \"); \r\n\t}\r\n}\r\npublic class OverDog extends Dog {\r\n\tpublic void act() {\r\n\t\tsuper.act();\r\n\t\tSystem.out.print(\"eat \");\r\n\t}\r\n}\r\npublic class UnderDog extends OverDog {\r\n\tpublic void act() { \r\n\t\tsuper.act();\r\n\t\tSystem.out.print(\"sleep \");\r\n\t}\r\n\tpublic void eat() { \r\n\t\tsuper.eat(); \r\n\t\tSystem.out.print(\"bark \"); \r\n\t} \r\n}\r\n```\r\nAssume that the following declaration appears in a class other than Dog.  \r\n```Java\r\nDog fido = new UnderDog();\r\n```  \r\nWhat is printed as a result of the call fido.act()?  \r\n(a) eat sleep  \r\n(b) \"sleep eat \" is printed, then \"run eat \" is printed infinitely  \r\n(c) run eat sleep  \r\n(d) Nothing is printed due to infinite recursion.  \r\n(e) run is printed infinitely.  \r\nCorrect answer e).\r\n\r\n\r\n\r\n## Question 2  \r\n### Original: \r\nFor any object obj, a call ```obj.getClass().getName()``` returns the name of the obj's class.\r\nSuppose\r\n```Java\r\nSystem.out.println(new A() + \"+\" + new B());\r\n```\r\ndisplays ```A+B ```\r\nWhich of the following implementations would produce that result?  \r\nI. Class A has a method\r\n```Java\r\npublic String toString() { return \"A\"; }\r\n```\r\n   and class B has a method\r\n```Java\r\npublic String toString() { return \"B\"; }\r\n```\r\nII. Both class A and class B extend class X that has a method\r\n```Java\r\npublic String toString() { return getClass().getName(); }\r\n```\r\nIII. Both class A and class B extend an abstract class X that has methods\r\n```Java\r\npublic abstract String getName();\r\n\r\n```\r\n   Class A has a method\r\n```Java\r\npublic String toString() { return getName(); }\r\n```\r\n   and class B has a method\r\n```Java\r\npublic String toString() { return getName(); }\r\n```\r\na) I only  \r\nb) II only  \r\nc) I and II  \r\nd) II and III  \r\ne) I, II, and III  \r\nCorrect answer e).\r\n\r\n### New Version:\r\nFor any object obj, a call ```obj.getClass().getName()``` returns the name of the obj's class.\r\nSuppose\r\n```Java\r\nSystem.out.println(new A().equals(new B());\r\n```\r\ndisplays ```true```\r\nWhich of the following implementations would produce that result?  \r\nI. Class A has a method\r\n```Java\r\npublic boolean equals(Object o) { return getClass().getName().equals(o.getClass().getName()); }\r\n```\r\n   and class B has a method\r\n```Java\r\npublic boolean equals(Object o) { return getClass().getName().equals(o.getClass().getName()); }\r\n```\r\nII. Both class A and class B extend class X that has a method\r\n```Java\r\npublic boolean equals(Object o) { return getClass().getSuperclass().getName().equals(o.getClass(().getSuperclass().getName())); }\r\n```\r\nIII. Both class A and class B extend an abstract class X that has methods\r\n```Java\r\npublic abstract String getName();\r\npublic String toString() { return getName(); }\r\n```\r\n\r\na) I only  \r\nb) II only  \r\nc) I and II  \r\nd) II and III  \r\ne) I, II, and III  \r\n\r\n\r\n\r\n## Question 3\r\n### Original Version\r\n```Java\t\r\npublic class Gambler {\r\n\tint money;\r\n\tpublic Gambler(int m) { money = m; }\r\n\tpublic int currentMoney() { return money; }\r\n\tpublic void addMoney(int m) { money += m; }\r\n\tpublic void work() { money += 100; }\r\n\tpublic void play() { money /= 2; }\r\n\tpublic liveAnotherDay() { work(); play(); }\r\n\tpublic String toString() { return String.valueOf(money); }\r\n}\r\n\r\npublic class CompulsiveGambler extends Gambler {\r\n\tpublic CompulsiveGambler(int m) {\r\n\t\t< Missing statements >\r\n\t}\r\n\r\n\tpublic void work() { /* do nothing */ }\r\n\r\n\tpublic void play() {\r\n\t\twhile (currentMoney() > 1) {\r\n\t\t\tsuper.play();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nGiven that\r\n```System.out.println(new CompulsiveGambler(300));```\r\ndisplays 300, which of the following could replace < Missing statements > in CompulsiveGambler's constructor?  \r\nI.    addMoney(m);  \r\nII.    super(m);  \r\nIII.   super();  \r\n     addMoney(m);  \r\na) I only  \r\nb) II only  \r\nc) I or II  \r\nd) II or III  \r\ne) I, II, or III  \r\nCorrect answer b).\r\n\r\n### New Version\r\n```Java\t\r\npublic class Gambler {\r\n\tint money;\r\n\tpublic Gambler(int m) { money = m; }\r\n\tpublic int currentMoney() { return money; }\r\n\tpublic void addMoney(int m) { money += m; }\r\n\tpublic void work() { money += 100; }\r\n\tpublic void play() { money /= 2; }\r\n\tpublic liveAnotherDay() { work(); play(); }\r\n\tpublic String toString() { return String.valueOf(money); }\r\n}\r\n\r\npublic class CompulsiveGambler extends Gambler {\r\n\tpublic CompulsiveGambler(int m) {\r\n\t\t< Missing statements >\r\n\t}\r\n\r\n\tpublic void work() { /* do nothing */ }\r\n\r\n\tpublic void play() {\r\n\t\twhile (currentMoney() > 1) {\r\n\t\t\tsuper.play();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nGiven that\r\n```System.out.println(new CompulsiveGambler(300));```\r\ndisplays 300, which of the following could replace < Missing statements > in CompulsiveGambler's constructor?  \r\nI. super(m/2);  \r\naddMoney(m/2);  \r\nII. addMoney(m/2);  \r\nsuper(m/2);  \r\nIII. super();  \r\naddMoney(m);  \r\na) I only  \r\nb) II only  \r\nc) I or II  \r\nd) II or III  \r\ne) I, II, or III  \r\ncorrect answer a).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}